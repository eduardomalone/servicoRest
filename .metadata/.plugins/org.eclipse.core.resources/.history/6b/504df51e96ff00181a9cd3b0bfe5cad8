package br.com.projeto.action;

import java.sql.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.opensymphony.xwork2.Action;

import br.com.projeto.dao.ExameDao;
import br.com.projeto.dao.MedicoDao;
import br.com.projeto.dao.PacienteDao;
import br.com.projeto.entity.Exame;
import br.com.projeto.entity.Medico;
import br.com.projeto.entity.Paciente;

public class ExameAction implements Action{

	private List<Exame> exames;
	
	private Exame exame;
	
	private ExameDao dao = new ExameDao();
	
	private PacienteDao pacienteDao = new PacienteDao();
	private MedicoDao medicoDao = new MedicoDao();
	
	private List<Medico> medicos;
	private List<Paciente> pacientes;
	
	@Override
	public String execute() throws Exception {
				
		this.exames = dao.findAll();
		
		return "success";
	}
	
	public String telaForm() throws Exception {
		
		medicos = medicoDao.findAll();
		pacientes = pacienteDao.findAll();
		
		if(exame == null || exame.getId() == null) {
			exame = new Exame();
			exame.setData(new Date(System.currentTimeMillis()));
		}
		
		return "form";
	}
	
	public String salvar() throws Exception {
		
		try {
			
			if(exame.getId() != null) {
				
				// Atualizar
				
				//dao.update(exame);
				
			} else {
				
				// Cadastrar
				
				//dao.create(exame);
								
			}
			
		} catch (Exception e) {
			//addActionError("Erro ao salvar as informações do médico.");
		}
		
		return "redirectSuccess";
		
	}

	public List<Exame> getExames() {
		return exames;
	}

	public void setExames(List<Exame> exames) {
		this.exames = exames;
	}

	public Exame getExame() {
		return exame;
	}

	public void setExame(Exame exame) {
		this.exame = exame;
	}

	public Map<Long, String> getMedicos() {
		
		Map<Long, String> medicos = new HashMap<Long, String>();
		
		for(Medico m : this.medicos) {
			
			medicos.put(m.getId(), m.getNome());
			
		}
		
		return medicos;
	}

	public void setMedicos(List<Medico> medicos) {
		this.medicos = medicos;
	}

	public Map<Long, String> getPacientes() {
		
		Map<Long, String> pacientes = new HashMap<Long, String>();
		
		for(Paciente m : this.pacientes) {
			
			pacientes.put(m.getId(), m.getNome());
			
		}
		
		return pacientes;
		
	}

	public void setPacientes(List<Paciente> pacientes) {
		this.pacientes = pacientes;
	}
	private Long id;

	/**
	 * @return the id
	 */
	public Long getId() {
		return id;
	}

	/**
	 * @param id the id to set
	 */
	public void setId(Long id) {
		this.id = id;
	}
	
}
